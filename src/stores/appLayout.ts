import { defineStore } from 'pinia'

export interface State {
  layoutView: string,
  layoutHeader: boolean,
  layoutHeaderType: string,
  layoutHeaderVisible: boolean,
  layoutHeaderReveal: boolean,
  layoutHeaderElevated: boolean,
  layoutHeaderBordered: boolean,
  headerCustomClass: string,
  layoutLeftDrawer: boolean,
  layoutLeftDrawerMini: boolean,
  layoutLeftDrawerMiniWidth: number,
  layoutLeftDrawerMiniToOverlay: boolean,
  layoutLeftDrawerType: string,
  layoutLeftDrawerVisible: boolean,
  layoutLeftDrawerBehavior: 'default' | 'desktop' | 'mobile' | undefined,
  layoutLeftDrawerOverlay: boolean,
  layoutLeftDrawerElevated: boolean,
  layoutLeftDrawerBordered: boolean,
  layoutLeftDrawerShowIfAbove: boolean,
  layoutLeftDrawerCustomClass: string,
  layoutLeftDrawerWidth: number,
  layoutRightDrawer: boolean,
  layoutRightDrawerType: string,
  layoutRightDrawerVisible: boolean,
  layoutRightDrawerBehavior: 'default' | 'desktop' | 'mobile' | undefined,
  layoutRightDrawerOverlay: boolean,
  layoutRightDrawerElevated: boolean,
  layoutRightDrawerBordered: boolean,
  layoutRightDrawerShowIfAbove: boolean,
  rightDrawerCustomClass: string,
  rightDrawerWidth: number,
  pageContainerCustomClass: string,
  layoutFooter: boolean,
  layoutFooterHeight: number,
  layoutFooterType: string,
  layoutFooterVisible: boolean,
  layoutFooterReveal: boolean,
  layoutFooterElevated: boolean,
  layoutFooterBordered: boolean,
  layoutBottomPanelFullHeight: boolean,
  footerCustomClass: string,
  injectDrawerOnScrolling: boolean,
  layoutBreadcrumbs: boolean,
  layoutBreadcrumbsElements: [],
  layoutBottomPanelVisible: boolean,
  layoutPageOffset: number,
}

export const useAppLayout = defineStore('appLayout', {
  state: (): State => {
    return {
      layoutView: 'lHh Lpr lFf',
      layoutHeader: false,
      layoutHeaderType: 'mainPanel',
      layoutHeaderVisible: false,
      layoutHeaderReveal: false,
      layoutHeaderElevated: false,
      layoutHeaderBordered: false,
      headerCustomClass: '',
      layoutLeftDrawer: false,
      layoutLeftDrawerMini: false,
      layoutLeftDrawerMiniWidth: 57,
      layoutLeftDrawerMiniToOverlay: false,
      layoutLeftDrawerType: 'mainPanel',
      layoutLeftDrawerVisible: false,
      layoutLeftDrawerBehavior: 'default',
      layoutLeftDrawerOverlay: false,
      layoutLeftDrawerElevated: false,
      layoutLeftDrawerBordered: false,
      layoutLeftDrawerShowIfAbove: false,
      layoutLeftDrawerCustomClass: '',
      layoutLeftDrawerWidth: 300,
      layoutRightDrawer: false,
      layoutRightDrawerType: 'mainPanel',
      layoutRightDrawerVisible: false,
      layoutRightDrawerBehavior: 'default',
      layoutRightDrawerOverlay: false,
      layoutRightDrawerElevated: false,
      layoutRightDrawerBordered: false,
      layoutRightDrawerShowIfAbove: false,
      rightDrawerCustomClass: '',
      rightDrawerWidth: 300,
      pageContainerCustomClass: '',
      layoutFooter: false,
      layoutFooterHeight: 0,
      layoutFooterType: 'mainPanel',
      layoutFooterVisible: false,
      layoutFooterReveal: false,
      layoutFooterElevated: false,
      layoutFooterBordered: false,
      layoutBottomPanelFullHeight: false,
      footerCustomClass: '',
      injectDrawerOnScrolling: true,
      layoutBreadcrumbs: false,
      layoutBreadcrumbsElements: [],
      layoutBottomPanelVisible: false,
      layoutPageOffset: 0
    }
  },
  actions: {
    updateLayoutConfig (config: State) {
      Object.keys(config).forEach(key => {
        // @ts-ignore
        this[key] = config[key]
      })
    }
  }
})
